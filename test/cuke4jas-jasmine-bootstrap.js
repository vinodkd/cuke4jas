/*
  This is the bootstrap version of the cuke4jas spec. That is, it was created by running convert on cuke4jas.feature, and modifying the result by hand.
  It therefore helped in the early testing of cuke4jas before step definitions were supported.
  The final version of cuke4jas.feature is expected to be completely run from step definitions
  
  Another interesting point: Note the toHaveItems function below. I thought it somewhat wierd that scenarios with no assertions wouldnt fail; they'd be merely skipped over.
  I'm not sure if that's in the BDD way, but I thought the purpose of a testing framework was to call out when things didnt work as expected.
  At the very least, I'd imagine the BDD framework to call out things that didnt have any assertions.
  TODO: find out how cucumber/rspec works in this respect.
  
  Anywyay, as you can see, I implemented my own check. Its not perfect - it cannot detect if individual steps in a scenario have assertions - but it ensures that each scenario has at least one.
  I'm still in two minds if I should include this automatically in the script generated by cuke4jas.
  TODO: determine if toHaveItems matcher should be added to generated script.
*/
feature('Convert cuke spec to jasmine template', function(){
    beforeEach(function() {
      this.addMatchers({
        toHaveItems: function() { 
            this.message = function() {
              return [
                "Expected \"" + this.actual.description + "\" to have at least 1 validation. Add validations using matchers",
              ];
            };
            return this.actual.getItems().length > 0 ; 
        }
      });
    });

    scenario('Test basic cuke spec', function(){
        var cukescript1, expected_jasscript1, actual_jasscript1;
        given('basic cuke spec', function(){
          cukescript1='Feature: Convert cuke spec to jasmine template \r\n  Scenario: Test basic cuke spec \r\n    Given basic cuke spec\r\n    When I convert it using cuke4jas\r\n    Then I should see jasmine template 1\r\n';	
        });
        when('I convert it using cuke4jas', function(){
          actual_jasscript1=cuke4jas.toJasmine(cukescript1);
          // not the best possible way, but the easiest to debug string output similarity.
          //alert(actual_jasscript1);
        });
        then('I should see jasmine template 1', function(){
          expected_jasscript1="feature('Convert cuke spec to jasmine template', function(){\n	scenario('Test basic cuke spec', function(){\n		given('basic cuke spec', function(){\n		});\n		when('I convert it using cuke4jas', function(){\n		});\n		then('I should see jasmine template 1', function(){\n		});\n		\n	});\n});"
          expect(actual_jasscript1).toEqual(expected_jasscript1);
        });
        
    });

	scenario('Test cuke spec with step definitions', function(){
		var cukescript1, expected_jasscript1, actual_jasscript1;
    
    // i had to build this after string comparisons took a lot of time
    function printChars(str){
      var outp=str.length + ':';
      for(var i=0;i<str.length;i++){
        outp += str.charAt(i) + ',';
      }
    }

    given('A cuke spec with step definitions', function(){
          cukescript1='Feature: Convert cuke spec to jasmine template \n Scenario: Test cuke spec with step definitions\n    Given A cuke spec with step definitions\n    When I convert it using cuke4jas\n    Then I should see a jasmine template with step definitions\n';	
		});
		when('I convert it using cuke4jas', function(){
          actual_jasscript1=cuke4jas.toJasmine(cukescript1,true);
          // not the best possible way, but the easiest to debug string output similarity.
          // alert(actual_jasscript1);
		});
		then('I should see a jasmine template with step definitions', function(){
        // had to go through a lot of trouble to get this string to work. key point: converter adds a new line with 2 tabs at the of the feature close brace
          expected_jasscript1="feature('Convert cuke spec to jasmine template', function(){\n\tscenario('Test cuke spec with step definitions', function(){\n\t\tgiven('A cuke spec with step definitions', a_cuke_spec_with_step_definitions);\n\t\twhen('I convert it using cuke4jas', i_convert_it_using_cuke4jas);\n\t\tthen('I should see a jasmine template with step definitions', i_should_see_a_jasmine_template_with_step_definitions);\n\t\t\n\t});\n});";
          //console.log((expected_jasscript1));
          //console.log((actual_jasscript1));
          expect(printChars(actual_jasscript1)).toEqual(printChars(expected_jasscript1));
		});
        
    });


    afterEach(function(){
        expect(this.results()).toHaveItems();
    });

});

